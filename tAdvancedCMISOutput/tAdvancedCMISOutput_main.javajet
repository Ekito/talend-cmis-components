<%@ jet 
imports="
    	org.talend.core.model.process.INode 
    	org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType		
		java.util.List
		java.util.Map
		"
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String function = ElementParameterParser.getValue(node, "__FUNCTION__");
	List<Map<String, String>> propertyMappings = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__PROPERTY_MAPPING__");
	
	String objectTypeId = ElementParameterParser.getValue(node, "__OBJECT_TYPE_ID__");
	String baseTypeId = ElementParameterParser.getValue(node, "__BASE_TYPE_ID__");
	String targetFolder = ElementParameterParser.getValue(node, "__TARGET_FOLDER__");
	String contentFilePathColumn = ElementParameterParser.getValue(node, "__CONTENT_FILEPATH_COLUMN__");
	boolean createFolderRecursive = Boolean.valueOf( ElementParameterParser.getValue(node, "__CREATE_FOLDER_RECURSIVE__"));
	
	String targetFolderColumn = "";
	if (targetFolder.equals("COLUMN"))
	{
		targetFolderColumn = ElementParameterParser.getValue(node, "__TARGET_FOLDER_COLUMN__");
	}
			
	// getting incoming connection and name
    List<? extends IConnection> inConns = node.getIncomingConnections();
	IConnection inConn = null;
	String inConnName = null;
	if(inConns != null && inConns.size()>0){
	    inConn = inConns.get(0);
	    inConnName = inConn.getName();
	}
	
	//Init all outgoing connections data structure
	List< ? extends IConnection> outConns = node.getOutgoingSortedConnections();
	for (IConnection outConn : outConns)
	{
%>
	<%=outConn.getName() %> = null;
<%
	
	}

    String cid = node.getUniqueName();
	
	if (inConn != null && inConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {//1
						
		IMetadataTable inMetadata = inConn.getMetadataTable();
   		if (inMetadata!=null) {//2
			
			//Generates the query for existing data
    		List<IMetadataColumn> inColumns = inMetadata.getListColumns();
%>
		try
		{
			//Initialize the properties for the cmisObject
			//being created/updated
			java.util.Map<String, Object> properties_<%=cid %> = new java.util.HashMap<String, Object>();
			java.util.Map<String, Object> keys_<%=cid %> = new java.util.HashMap<String, Object>();
			
<%
			Boolean keysExists = false;
			
		    for(Map<String, String> propertyMapping : propertyMappings) {//6
		        String schemaColumn = propertyMapping.get("COLUMN");
		        String cmisPropertyID =  null;
		        Boolean isKey = false;
		        if (schemaColumn != null && schemaColumn.length() > 0) {
		            cmisPropertyID = propertyMapping.get("ID");
		            isKey = Boolean.valueOf(propertyMapping.get("KEY"));
		        } 
		        
		        for (int i = 0; i < inColumns.size(); i++) {//7
	  			
    				IMetadataColumn inColumn = inColumns.get(i);
    				
    				if (inColumn.getLabel().equals(schemaColumn)) { //8
						JavaType javaType = JavaTypesManager.getJavaTypeFromId(inColumn.getTalendType());
	
						boolean isPrimitive = JavaTypesManager.isJavaPrimitiveType( javaType, inColumn.isNullable());
						
						if(!isPrimitive) {
%>   				
	    		if(<%=inConn.getName() %>.<%=schemaColumn %> != null) {
<%
	    				}
%>              
                	properties_<%=cid %>.put("<%=cmisPropertyID %>",  <%=inConn.getName() %>.<%=schemaColumn %>);  						
<%
						if (isKey)
						{
%>
					keys_<%=cid %>.put("<%=cmisPropertyID %>",  <%=inConn.getName() %>.<%=schemaColumn %>);
<%
							keysExists = true;
						}
						if(!isPrimitive) {
%>
		    	} 
<%
						}

					}//8
				}//7
			}//6
			
%>
					//Add the objectTypeId
					properties_<%=cid %>.put(org.apache.chemistry.opencmis.commons.PropertyIds.OBJECT_TYPE_ID, <%=objectTypeId %>);
			
<%
			if (keysExists)
			{
%>
					keys_<%=cid %>.put(org.apache.chemistry.opencmis.commons.PropertyIds.OBJECT_TYPE_ID, <%=objectTypeId %>);
<%
			}
			
			//The target folder is recorded in the flow 
			if (targetFolder.equals("COLUMN"))
			{
%>
			//The target folder is coming from the data flow
			String targetFolderPath_<%=cid %> = "";
			if(<%=inConn.getName() %>.<%=targetFolderColumn %> != null) {
				targetFolderPath_<%=cid %> = <%=inConn.getName() %>.<%=targetFolderColumn %>;
			}
<%
			}
			
			if (baseTypeId.equals("cmis:document"))
			{
%>
			String contentStreamFilePath_<%=cid %> = <%=inConn.getName() %>.<%=contentFilePathColumn %>;
			
<%
			}
								
			if(function.equals("CREATE")){

					if(baseTypeId.equals("cmis:document")){
%>

			org.apache.chemistry.opencmis.client.api.CmisObject result = org.talend.cmis.helper.CMISHelper.createDocument(session_<%=cid %>,
				targetFolderPath_<%=cid %>,
				properties_<%=cid %>,
				keys_<%=cid %>,
				contentStreamFilePath_<%=cid %>);
			
			nb_line_<%=cid %>++;
<%
				}else if (baseTypeId.equals("cmis:folder")){
%>
			org.apache.chemistry.opencmis.client.api.CmisObject result = org.talend.cmis.helper.CMISHelper.createFolder(session_<%=cid %>,
				targetFolderPath_<%=cid %>,
				properties_<%=cid %>,
				keys_<%=cid %>,
				<%=createFolderRecursive%>);
				
			nb_line_<%=cid %>++;
<%
				}
			}else if(function.equals("UPDATE")){
%>
			org.apache.chemistry.opencmis.client.api.CmisObject result = org.talend.cmis.helper.CMISHelper.updateDocument(session_<%=cid %>,
				targetFolderPath_<%=cid %>,
				properties_<%=cid %>,
				keys_<%=cid %>,
				contentStreamFilePath_<%=cid %>);
				
			nb_line_<%=cid %>++;
<%
			}else if(function.equals("CREATE_OR_UPDATE")){
%>
			org.apache.chemistry.opencmis.client.api.CmisObject result = org.talend.cmis.helper.CMISHelper.createOrUpdateDocument(session_<%=cid %>,
				targetFolderPath_<%=cid %>,
				properties_<%=cid %>,
				keys_<%=cid %>,
				contentStreamFilePath_<%=cid %>);
				
			nb_line_<%=cid %>++;
<%
			}
			
			
	    	IConnection firstOutConn = null;
			String firstOutConnName = null;
			if (outConns!=null) {//1
				if (outConns.size()>0) {
					firstOutConn = outConns.get(0); //the first connection
					firstOutConnName = firstOutConn.getName();
				}
			}
			
    		if (firstOutConn != null && firstOutConnName != null && firstOutConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
    			
				IMetadataTable outMetadata = firstOutConn.getMetadataTable();
				if (outMetadata != null) {
%>
			<%=firstOutConnName%> = new <%=firstOutConnName%>Struct();
<%
		    		List<IMetadataColumn> outColumns = outMetadata.getListColumns();
		    		int sizeOutColumns = outColumns.size();
		    		
		    		//The output schema corresponds to the input schema. Just copy the value in output
			        for ( IMetadataColumn outColumn : outColumns) {
%>
			<%=firstOutConnName%>.<%=outColumn.getLabel()%> = <%=inConnName%>.<%=outColumn.getLabel()%>;
<%
					}
				}
    		}
	    		
%>
    			
    	} catch (Exception mainEx_<%=cid%>) {
	    
			// handling exception as standard output
			mainEx_<%=cid%>.printStackTrace();
            
	    }
<%
   		}//2
	}//1
%>
