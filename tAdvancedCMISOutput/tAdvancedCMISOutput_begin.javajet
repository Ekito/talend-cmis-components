<%@ jet 
imports="
    	org.talend.core.model.process.INode 
    	org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType		
		java.util.List
		java.util.Map
		java.util.HashMap
		"
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
    
        //Test if some metadata exists. Otherwise, no java code generation
    List<IMetadataTable> metadatas = node.getMetadataList();
	if ((metadatas!=null)&&(metadatas.size()>0)) {//1
    	IMetadataTable metadata = metadatas.get(0);
    	if (metadata!=null) {//2
    	
	    	String bindingType = ElementParameterParser.getValue(node, "__CMIS_BINDING_TYPE__");        
		    String atomPubUrl = ElementParameterParser.getValue(node, "__CMIS_ATOMPUB_URL__");
		    String webServicesUrl = ElementParameterParser.getValue(node, "__CMIS_WEBSERVICES_URL__");
		    webServicesUrl = webServicesUrl.replaceAll("\"", "");
			
			String username = ElementParameterParser.getValue(node, "__CMIS_USER_LOGIN__");
			String password = ElementParameterParser.getValue(node, "__CMIS_USER_PASSWORD__");
			String repositoryId = ElementParameterParser.getValue(node, "__CMIS_REPOSITORY__");
			String country = ElementParameterParser.getValue(node, "__COUNTRY_CONNECTION__");
			String language = ElementParameterParser.getValue(node, "__LANGUAGE_CONNECTION__");
			String timeout = ElementParameterParser.getValue(node, "__TIMEOUT_CONNECTION__");
			String compression = ElementParameterParser.getValue(node, "__COMPRESSION__");
			  
%>
	            
	int nb_line_<%=cid %> = 0;
	java.util.Map<String, String> parameters_<%=cid %> = new java.util.HashMap<String, String>();
	
	// user credentials
	parameters_<%=cid %>.put(org.apache.chemistry.opencmis.commons.SessionParameter.USER, <%=username %>);
	parameters_<%=cid %>.put(org.apache.chemistry.opencmis.commons.SessionParameter.PASSWORD, <%=password %>);

	// connection settings
	parameters_<%=cid %>.put(org.apache.chemistry.opencmis.commons.SessionParameter.BINDING_TYPE,
		"<%=bindingType%>");
<%
			if ("atompub".equals(bindingType))
			{
%>
	parameters_<%=cid %>.put(org.apache.chemistry.opencmis.commons.SessionParameter.ATOMPUB_URL, <%=atomPubUrl%>);
<%
			}else if ("webservices".equals(bindingType))
			{
%>
	parameters_<%=cid %>.put(org.apache.chemistry.opencmis.commons.SessionParameter.WEBSERVICES_ACL_SERVICE, "<%=webServicesUrl%>/ACLService?wsdl");
	parameters_<%=cid %>.put(org.apache.chemistry.opencmis.commons.SessionParameter.WEBSERVICES_DISCOVERY_SERVICE, "<%=webServicesUrl%>/DiscoveryService?wsdl");
	parameters_<%=cid %>.put(org.apache.chemistry.opencmis.commons.SessionParameter.WEBSERVICES_MULTIFILING_SERVICE, "<%=webServicesUrl%>/MultiFilingService?wsdl");
	parameters_<%=cid %>.put(org.apache.chemistry.opencmis.commons.SessionParameter.WEBSERVICES_NAVIGATION_SERVICE, "<%=webServicesUrl%>/NavigationService?wsdl");
	parameters_<%=cid %>.put(org.apache.chemistry.opencmis.commons.SessionParameter.WEBSERVICES_OBJECT_SERVICE, "<%=webServicesUrl%>/ObjectService?wsdl");
	parameters_<%=cid %>.put(org.apache.chemistry.opencmis.commons.SessionParameter.WEBSERVICES_POLICY_SERVICE, "<%=webServicesUrl%>/PolicyService?wsdl");
	parameters_<%=cid %>.put(org.apache.chemistry.opencmis.commons.SessionParameter.WEBSERVICES_RELATIONSHIP_SERVICE, "<%=webServicesUrl%>/RelationshipService?wsdl");
	parameters_<%=cid %>.put(org.apache.chemistry.opencmis.commons.SessionParameter.WEBSERVICES_REPOSITORY_SERVICE, "<%=webServicesUrl%>/RepositoryService?wsdl");
	parameters_<%=cid %>.put(org.apache.chemistry.opencmis.commons.SessionParameter.WEBSERVICES_VERSIONING_SERVICE, "<%=webServicesUrl%>/VersioningService?wsdl");
<%
			}
%>

	parameters_<%=cid %>.put(org.apache.chemistry.opencmis.commons.SessionParameter.REPOSITORY_ID, <%=repositoryId %>);

	// session locale
	parameters_<%=cid %>.put(org.apache.chemistry.opencmis.commons.SessionParameter.LOCALE_ISO3166_COUNTRY, <%=country %>);
	parameters_<%=cid %>.put(org.apache.chemistry.opencmis.commons.SessionParameter.LOCALE_ISO639_LANGUAGE, <%=language %>);
	parameters_<%=cid %>.put(org.apache.chemistry.opencmis.commons.SessionParameter.CONNECT_TIMEOUT, <%=timeout %>);
	parameters_<%=cid %>.put(org.apache.chemistry.opencmis.commons.SessionParameter.COMPRESSION, "<%=compression %>");
	
	//Create a new CMIS session
	org.apache.chemistry.opencmis.client.api.SessionFactory f_<%=cid %> = org.apache.chemistry.opencmis.client.runtime.SessionFactoryImpl.newInstance();
	org.apache.chemistry.opencmis.client.api.Session session_<%=cid %> = f_<%=cid %>.createSession(parameters_<%=cid %>);
	
	//TODO Manage cache as an option in the component
	//org.apache.chemistry.opencmis.client.api.OperationContext operationContext_<%=cid %> = session_<%=cid %>.createOperationContext();
	//operationContext_<%=cid %>.setCacheEnabled(false);
		
<%
			String targetFolder = ElementParameterParser.getValue(node, "__TARGET_FOLDER__");
			
			if (targetFolder.equals("DEFAULT"))
			{
				String targetFolderDefault = ElementParameterParser.getValue(node, "__TARGET_FOLDER_DEFAULT__");
%>
	//Get the target folder as it is a fixed value
	String targetFolderPath_<%=cid %> = <%=targetFolderDefault %>;
<%           
			}

  		}//2
	}//1
%>
    