<%@ jet 
imports="
    	org.talend.core.model.process.INode 
    	org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType		
		java.util.List
		java.util.Map
		java.util.HashMap
		"
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();

	String bindingType = ElementParameterParser.getValue(node, "__CMIS_BINDING_TYPE__");        
    String atomPubUrl = ElementParameterParser.getValue(node, "__CMIS_ATOMPUB_URL__");
    String webServicesUrl = ElementParameterParser.getValue(node, "__CMIS_WEBSERVICES_URL__");
    webServicesUrl = webServicesUrl.replaceAll("\"", "");
	String username = ElementParameterParser.getValue(node, "__CMIS_USER_LOGIN__");
	String password = ElementParameterParser.getValue(node, "__CMIS_USER_PASSWORD__");
	String repositoryId = ElementParameterParser.getValue(node, "__CMIS_REPOSITORY__");
	String country = ElementParameterParser.getValue(node, "__COUNTRY_CONNECTION__");
	String language = ElementParameterParser.getValue(node, "__LANGUAGE_CONNECTION__");
	String timeout = ElementParameterParser.getValue(node, "__TIMEOUT_CONNECTION__");
	String compression = ElementParameterParser.getValue(node, "__COMPRESSION__");
	boolean downloadContent = Boolean.valueOf(ElementParameterParser.getValue(node, "__DOWNLOAD_CONTENT__"));
	String contentPath = null;

	if (downloadContent)
	{
		contentPath = ElementParameterParser.getValue(node, "__CONTENT_PATH__");
	}
	
    //Test if some metadata exists. Otherwise, no java code generation
    List<IMetadataTable> metadatas = node.getMetadataList();
	if ((metadatas!=null)&&(metadatas.size()>0)) {//1
    	IMetadataTable metadata = metadatas.get(0);
    	if (metadata!=null) {//2		
%>

	int nb_line_<%=cid %> = 0;
	java.util.Map<String, String> parameters_<%=cid %> = new java.util.HashMap<String, String>();
	
	// user credentials
	parameters_<%=cid %>.put(org.apache.chemistry.opencmis.commons.SessionParameter.USER, <%=username %>);
	parameters_<%=cid %>.put(org.apache.chemistry.opencmis.commons.SessionParameter.PASSWORD, <%=password %>);

	// connection settings
	parameters_<%=cid %>.put(org.apache.chemistry.opencmis.commons.SessionParameter.BINDING_TYPE,
		"<%=bindingType%>");
<%
			if ("atompub".equals(bindingType))
			{
%>
	parameters_<%=cid %>.put(org.apache.chemistry.opencmis.commons.SessionParameter.ATOMPUB_URL, <%=atomPubUrl%>);
<%
			}else if ("webservices".equals(bindingType))
			{
%>
	parameters_<%=cid %>.put(org.apache.chemistry.opencmis.commons.SessionParameter.WEBSERVICES_ACL_SERVICE, "<%=webServicesUrl%>/ACLService?wsdl");
	parameters_<%=cid %>.put(org.apache.chemistry.opencmis.commons.SessionParameter.WEBSERVICES_DISCOVERY_SERVICE, "<%=webServicesUrl%>/DiscoveryService?wsdl");
	parameters_<%=cid %>.put(org.apache.chemistry.opencmis.commons.SessionParameter.WEBSERVICES_MULTIFILING_SERVICE, "<%=webServicesUrl%>/MultiFilingService?wsdl");
	parameters_<%=cid %>.put(org.apache.chemistry.opencmis.commons.SessionParameter.WEBSERVICES_NAVIGATION_SERVICE, "<%=webServicesUrl%>/NavigationService?wsdl");
	parameters_<%=cid %>.put(org.apache.chemistry.opencmis.commons.SessionParameter.WEBSERVICES_OBJECT_SERVICE, "<%=webServicesUrl%>/ObjectService?wsdl");
	parameters_<%=cid %>.put(org.apache.chemistry.opencmis.commons.SessionParameter.WEBSERVICES_POLICY_SERVICE, "<%=webServicesUrl%>/PolicyService?wsdl");
	parameters_<%=cid %>.put(org.apache.chemistry.opencmis.commons.SessionParameter.WEBSERVICES_RELATIONSHIP_SERVICE, "<%=webServicesUrl%>/RelationshipService?wsdl");
	parameters_<%=cid %>.put(org.apache.chemistry.opencmis.commons.SessionParameter.WEBSERVICES_REPOSITORY_SERVICE, "<%=webServicesUrl%>/RepositoryService?wsdl");
	parameters_<%=cid %>.put(org.apache.chemistry.opencmis.commons.SessionParameter.WEBSERVICES_VERSIONING_SERVICE, "<%=webServicesUrl%>/VersioningService?wsdl");
<%
			}
%>
	
	parameters_<%=cid %>.put(org.apache.chemistry.opencmis.commons.SessionParameter.REPOSITORY_ID, <%=repositoryId %>);

	// session locale
	parameters_<%=cid %>.put(org.apache.chemistry.opencmis.commons.SessionParameter.LOCALE_ISO3166_COUNTRY, <%=country %>);
	parameters_<%=cid %>.put(org.apache.chemistry.opencmis.commons.SessionParameter.LOCALE_ISO639_LANGUAGE, <%=language %>);
	parameters_<%=cid %>.put(org.apache.chemistry.opencmis.commons.SessionParameter.CONNECT_TIMEOUT, <%=timeout %>);
	parameters_<%=cid %>.put(org.apache.chemistry.opencmis.commons.SessionParameter.COMPRESSION, "<%=compression %>");
	
	//Create a new CMIS session
	org.apache.chemistry.opencmis.client.api.SessionFactory f_<%=cid %> = org.apache.chemistry.opencmis.client.runtime.SessionFactoryImpl.newInstance();
	org.apache.chemistry.opencmis.client.api.Session session_<%=cid %> = f_<%=cid %>.createSession(parameters_<%=cid %>);
<%

		}//2
	}//1
	List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
	
	// getting reject connection columnList and name
	IConnection rejectConn = null;
	String rejectConnName = null;
	List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
	
	if(rejectConns != null && rejectConns.size() > 0) {
	    rejectConn = rejectConns.get(0);
	    rejectConnName = rejectConn.getName();
	}
	
	List<IMetadataColumn> rejectColumns = null;
	IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
	if(metadataTable != null) {
	    rejectColumns = metadataTable.getListColumns();      
	}
	
	IConnection firstConn = null;
	String firstConnName = "";
	List<? extends IConnection> mainConns = node.getMainOutgoingConnections();
	
	if(mainConns != null && mainConns.size() > 0) {
	    firstConn = mainConns.get(0);
	    firstConnName = firstConn.getName();
	}
	
	if (firstConnName != null)
	{
%>
	<%=firstConnName %> = null;
<%
	}
	if (rejectConnName != null)
	{
%>
	<%=rejectConnName %> = null;
<%
	}

	if ( ( metadatas != null ) && ( metadatas.size() > 0 ) ) {//4
	    IMetadataTable metadata = metadatas.get(0);
	    if (metadata!=null) {//5    
	    	
	    	List<Map<String, String>> propertyMappings = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__PROPERTY_MAPPING__");
	
			Map<String, String> inputMapping = new HashMap<String, String>();
			
			for (Map<String,String> propertyMapping : propertyMappings)
			{
				String cmisPropertyId = propertyMapping.get("ID");
				String schemaPropertyId = propertyMapping.get("COLUMN");
				inputMapping.put(schemaPropertyId, cmisPropertyId);
			}
			
	    	String query = ElementParameterParser.getValue(node, "__QUERY__");
	    	
	   
%>
            
	org.apache.chemistry.opencmis.client.api.ItemIterable<org.apache.chemistry.opencmis.client.api.QueryResult> results_<%=cid %> = null;
		
	try
	{
		results_<%=cid %> = session_<%=cid %>.query(<%=query %>, true);
		
	} catch (Exception mainEx_<%=cid%>) { // end reject exception handling
	    
<%
	        // handling exception as reject connection or std err
	        if(rejectConnName != null && rejectColumns != null && rejectColumns.size() > 0) {
%>
	    <%=rejectConnName %> = new <%=rejectConnName %>Struct();
	    
	    <%=rejectConnName%>.errorOrigin = <%=query %>;
	    <%=rejectConnName%>.errorMessage = mainEx_<%=cid%>.getMessage();
	    <%=rejectConnName%>.errorCode = "";
<%
            } else {
%>
        // handling exception as std err
        System.err.println(mainEx_<%=cid%>.getMessage());
<%
            }
%>
            
	}
	
	//Read the retrieved record
	for (java.util.Iterator<org.apache.chemistry.opencmis.client.api.QueryResult> resultIterator_<%=cid %> = results_<%=cid%>.iterator(); resultIterator_<%=cid %>.hasNext();) {
	
		org.apache.chemistry.opencmis.client.api.QueryResult result_<%=cid %> = (org.apache.chemistry.opencmis.client.api.QueryResult) resultIterator_<%=cid %>.next();
		nb_line_<%=cid %>++;

        <%=firstConnName %> = new <%=firstConnName %>Struct();
		org.apache.chemistry.opencmis.commons.data.PropertyData<?> propertyData_<%=cid %> = null;
<%
					
			if (firstConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {//6
		
				List<IMetadataColumn> columns=metadata.getListColumns();
				int columnSize = columns.size();
				for (int i=0;i<columnSize;i++) {//7
					IMetadataColumn column=columns.get(i);
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
					String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
					
					String cmisPropertyName = inputMapping.get(column.getLabel());

					if (cmisPropertyName != null) {
%>
		            			 
		propertyData_<%=cid %> = result_<%=cid %>.getPropertyById("<%=cmisPropertyName %>");
		
		if (propertyData_<%=cid %> != null){
			
			Object propertyValue_<%=cid %> = propertyData_<%=cid %>.getFirstValue();
			if (propertyValue_<%=cid %> != null){
<%
					if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) { //String or Object
%>
				<%=firstConnName %>.<%=column.getLabel() %> = propertyValue_<%=cid %>.toString();
<%
					} else if(javaType == JavaTypesManager.DATE) { //Date
%>
				<%=firstConnName %>.<%=column.getLabel() %> = ((java.util.Calendar)propertyValue_<%=cid %>).getTime();
<%
					} else if(javaType == JavaTypesManager.BYTE_ARRAY) { //byte[]
%>
				<%=firstConnName %>.<%=column.getLabel() %> = util_<%=cid %>.getFieldbyOrder(propertyValue_<%=cid %>.toString()).getBytes();
<%
					} else { //others
%>				
				<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(propertyValue_<%=cid %>.toString());
<%
					}
%>
			}else{
				<%=firstConnName %>.<%=column.getLabel() %> = null;
			}
		}else{
<%
					}//End if (cmisPropertyName != null) 
%>
		
			//Fill the property with its default value
			<%=firstConnName %>.<%=column.getLabel() %> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
<%
					if (cmisPropertyName != null) { 
%>
		}
<%
					}//End if (cmisPropertyName != null) 
%>
					
					
<%
				} //7
			}//6
				
				
			if (conns.size()>1) {
				for (int i=1;i<conns.size();i++) {
					IConnection conn2 = conns.get(i);
					if ((conn2.getName().compareTo(firstConnName)!=0)&&(conn2.getName().compareTo(rejectConnName)!=0)
					&&(conn2.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA))) {
				    	for (IMetadataColumn column: metadata.getListColumns()) {
%>
	      			<%=conn2.getName() %>.<%=column.getLabel() %> = <%=firstConnName %>.<%=column.getLabel() %>;
<%
					 	}
					}
				}
			}
						
			if (downloadContent)
			{//8
			
%>
		//Save the document content
		propertyData_<%=cid %> = result_<%=cid %>.getPropertyById("cmis:objectId");
		String objectIdString_<%=cid %> = (String)propertyData_<%=cid %>.getFirstValue();
		org.apache.chemistry.opencmis.client.api.ObjectId objectId_<%=cid %> = session_<%=cid %>.createObjectId(objectIdString_<%=cid %>);
		org.apache.chemistry.opencmis.client.api.CmisObject cmisObject_<%=cid %> = session_<%=cid %>.getObject(objectId_<%=cid %>);
		
		org.talend.cmis.helper.CmisHelper.extractCMISObjectContent(cmisObject_<%=cid %>, <%=contentPath %>);
<%				
			}//8
  		}//5
	}//4
%>
    